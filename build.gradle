import java.nio.charset.Charset
import java.nio.file.Files

plugins {
    id 'java'
    id 'signing'
    id 'checkstyle'
    id 'info.solidsoft.pitest'  version '1.9.11'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'com.github.spotbugs' version '5.1.3'
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
    id 'maven-publish'
}

wrapper {
    gradleVersion = '7.6.2'
    distributionType = Wrapper.DistributionType.BIN
}

defaultTasks 'clean', 'build', 'jar', 'publishToMavenLocal'

def appGroup = 'pl.coffeepower'
def versionPath = projectDir.toPath().resolve('version.txt')
def appVersion = Files.readAllLines(versionPath, Charset.forName("UTF-8"))
        .first()
        .trim()
def appName = rootProject.name

group = appGroup
version = appVersion.endsWith('SNAPSHOT') ?
        appVersion + '-' + (new Date().format('yyyyMMddHHmmss')) :
        appVersion

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    options.encoding = 'UTF-8'
}

build.dependsOn 'pitest'

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocsJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives jar, javadocsJar, sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                name = appName
                description = 'Guice module for Liquibase to execute DB change sets automatically as a CDI extension'
                url = 'https://github.com/michaljonko/GuiceLiquibase'
                licenses {
                    license {
                        name = 'Apache-2.0'
                        url = 'https://raw.githubusercontent.com/michaljonko/GuiceLiquibase/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'michaljonko'
                        name = 'Michal Jonko'
                        email = 'michal.jonko@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:github.com/michaljonko/GuiceLiquibase.git'
                    developerConnection = 'scm:git:ssh://github.com/michaljonko/GuiceLiquibase.git'
                    url = 'https://github.com/michaljonko/GuiceLiquibase'
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
            snapshotRepositoryUrl= uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'com.google.inject', name: 'guice', version: '5.0.1'
    implementation group: 'org.yaml', name: 'snakeyaml', version: '2.0'
    implementation group: 'org.liquibase', name: 'liquibase-core', version: '4.20.0'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.9'

    testRuntimeOnly group: 'org.slf4j', name: 'slf4j-simple', version: '2.0.9'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.10.0'
    testRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-launcher'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '4.11.0'
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.24.2'
    testImplementation group: 'org.hsqldb', name: 'hsqldb', version: '2.7.2', classifier: 'jdk8'
    testImplementation group: 'nl.jqno.equalsverifier', name: 'equalsverifier', version: '3.15.1'
    testImplementation group: 'com.jparams', name: 'to-string-verifier', version: '1.4.8'
    testImplementation "com.github.spotbugs:spotbugs-annotations:${spotbugs.toolVersion.get()}"
}

test {
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true
}

checkstyle {
    toolVersion = '10.12.3'
    ignoreFailures = false
}

tasks.withType(Checkstyle) {
    reports {
        xml.required = false
        html.required = true
    }
}

pitest {
    threads = 2
    junit5PluginVersion = '1.2.0'
    pitestVersion = '1.15.0'
}

spotbugs {
    excludeFilter = file('config/spotbugs/exclude.xml')
}
